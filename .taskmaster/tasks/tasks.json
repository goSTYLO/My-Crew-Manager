{
  "master": {
    "tasks": [
      {
        "id": 16,
        "title": "Set up Core LLM Environment and Integration",
        "description": "Establish the foundational environment for LLM interaction, including installing necessary libraries, configuring API keys, and setting up basic communication with the chosen LLM provider (e.g., OpenAI, Hugging Face).",
        "details": "This involves selecting an LLM service, setting up authentication, and creating a wrapper or utility class for making API calls. Focus on robust error handling and rate limiting.",
        "testStrategy": "Unit tests for LLM API client connectivity. Integration tests for a simple prompt-response cycle.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Develop PDF Proposal Text Extraction Module",
        "description": "Create a robust module capable of ingesting PDF files, extracting all textual content, and pre-processing it for optimal LLM consumption (e.g., cleaning, handling multi-column layouts, basic chunking).",
        "details": "Research and implement a suitable PDF parsing library (e.g., PyPDF2, pdfminer.six, pypdf). Handle various PDF structures and potential OCR needs if text is image-based (though initial focus can be on text-based PDFs).",
        "testStrategy": "Unit tests with various PDF samples (simple, complex, multi-page) to ensure accurate text extraction. Integration tests with the LLM environment for pre-processing.",
        "priority": "high",
        "dependencies": [
          16
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Implement AI/LLM for Project Summary & Member Extraction",
        "description": "Design and implement the LLM prompting strategy and post-processing logic to extract the project summary, key details, and initial team members/roles from the parsed PDF text.",
        "details": "Develop specific prompts to guide the LLM in identifying and structuring this information. Implement robust parsing of the LLM's natural language output into a structured JSON format that maps to the Project and Members data models.",
        "testStrategy": "Unit tests for prompt effectiveness and output parsing with various proposal text snippets. Integration tests with the PDF extraction module.",
        "priority": "high",
        "dependencies": [
          16,
          17
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Implement AI/LLM for Epic Generation",
        "description": "Develop the AI/LLM logic to analyze the project proposal text and automatically identify and generate high-level Epics, representing major functional areas or goals of the project.",
        "details": "Craft prompts that encourage the LLM to break down the project into logical, distinct Epics. Implement mechanisms to ensure consistency and avoid redundancy. Store the generated Epics in the database, linked to the project.",
        "testStrategy": "Unit tests with different proposal texts to verify Epic identification and relevance. Manual review of generated Epics for accuracy and completeness.",
        "priority": "high",
        "dependencies": [
          16,
          17,
          18
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Implement AI/LLM for Sub-Epic & User Story Generation",
        "description": "Extend the AI/LLM capabilities to further decompose generated Epics into Sub-Epics and then into detailed User Stories, including acceptance criteria where possible.",
        "details": "This will likely involve chained LLM calls or more complex prompting strategies, feeding the LLM with an Epic's context to generate its children. Ensure the hierarchical relationships are correctly established and stored in the database.",
        "testStrategy": "Unit tests for hierarchical decomposition accuracy. Manual review of generated Sub-Epics and User Stories for logical flow and completeness.",
        "priority": "high",
        "dependencies": [
          19
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Implement Core Database Schema",
        "description": "Design and implement the database schema for the core domain apps: users, projects, backlog, sprints. Ensure proper relationships, modular separation, and support for LLM-generated data.",
        "details": "Use Django ORM to define models within their respective domain apps. Ensure one-to-many and many-to-one relationships are properly declared using ForeignKey and related_name. Index foreign keys for performance. Include a ProjectInsights model to store LLM-generated summaries and metadata.",
        "testStrategy": "Run Django migration tests. Write unit tests for model instantiation, relationships, and basic CRUD operations using Django's TestCase and test database.",
        "priority": "high",
        "dependencies": [],
        "status": "todo",
        "subtasks": [
          {
            "id": 1,
            "title": "Validate Django ORM Setup",
            "description": "Ensure all domain apps are listed in INSTALLED_APPS. Confirm migrations folders exist and __init__.py is present. Run initial migrations to verify setup.",
            "dependencies": [],
            "details": "Check apps: users, projects, backlog, sprints, voice, gamification. Run `python manage.py makemigrations` and `migrate`. Confirm database connectivity and migration success.",
            "status": "done",
            "testStrategy": "Run `manage.py check` and `migrate` without errors. Validate model discovery and migration generation."
          },
          {
            "id": 2,
            "title": "Finalize User and Member Models",
            "description": "Refactor users/models.py to include custom User model with proper manager and admin compatibility. Move Member model to projects/models.py and link to User and Project.",
            "dependencies": [
              1
            ],
            "details": "Fix manager assignment, add is_staff and is_superuser fields. Ensure AUTH_USER_MODEL is set. Member should include role, user FK, project FK, timestamps.",
            "status": "done",
            "testStrategy": "Test user creation, superuser creation, and Member associations. Validate admin registration and model relationships."
          },
          {
            "id": 3,
            "title": "Implement Project, Proposal, and ProjectInsights Models",
            "description": "Define Project and Proposal models in projects/models.py. Add ProjectInsights model to store LLM-generated summaries, risks, and goals.",
            "dependencies": [
              1,
              2
            ],
            "details": "Project includes title, summary, risks, timestamps. Proposal includes file, parsedText, methodology, FK to Project. ProjectInsights includes FK to Project or Proposal, summary, risks, goals, llm_version, created_at.",
            "status": "pending",
            "testStrategy": "Test creation and linking of Project, Proposal, and ProjectInsights. Validate LLM output storage and retrieval."
          },
          {
            "id": 4,
            "title": "Implement Backlog Models: Backlog, Epic, SubEpic, UserStory",
            "description": "Define backlog hierarchy in backlog/models.py. Ensure proper FK relationships and support for LLM-generated backlog ingestion.",
            "dependencies": [
              1,
              3
            ],
            "details": "Backlog links to Project. Epic links to Backlog. SubEpic links to Epic. UserStory links to SubEpic or Epic. Include acceptance_criteria, priority, status, timestamps.",
            "status": "pending",
            "testStrategy": "Test hierarchy creation and traversal. Validate FK integrity and LLM mapping to backlog structure."
          },
          {
            "id": 5,
            "title": "Implement Sprint, Task, and UserTask Models",
            "description": "Define sprint planning models in sprints/models.py. Link tasks to UserStories and optionally to Sprints. Include UserTask for member-task assignments.",
            "dependencies": [
              1,
              3,
              4
            ],
            "details": "Sprint includes duration, start/end dates, status. Task links to UserStory and Project. UserTask links Task to Member. Include timestamps and status fields.",
            "status": "pending",
            "testStrategy": "Test sprint creation, task assignment, and UserTask linking. Validate backlog-to-sprint transitions."
          }
        ]
      },
      {
        "id": 22,
        "title": "Develop Backend API for Proposal Upload & AI Trigger",
        "description": "Create a RESTful API endpoint that allows Project Managers to upload PDF proposals. This endpoint will trigger the entire AI parsing and project initialization workflow.",
        "details": "Implement file upload handling, secure storage of PDFs, and asynchronous processing of the AI pipeline to avoid blocking the API response. Provide feedback mechanisms for processing status.",
        "testStrategy": "API integration tests for file upload and successful triggering of the AI pipeline. Stress tests for concurrent uploads.",
        "priority": "high",
        "dependencies": [
          17,
          18,
          21
        ],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Develop Backend API for Backlog Generation Request",
        "description": "Create a dedicated API endpoint that Project Managers can call to explicitly request the AI/LLM to generate or re-generate the backlog hierarchy (Epics, Sub-Epics, User Stories) for a given project.",
        "details": "This endpoint should accept a projectId and trigger the AI/LLM processes for backlog generation. It should handle cases where a backlog already exists (e.g., update or append).",
        "testStrategy": "API integration tests for triggering backlog generation and verifying data persistence.",
        "priority": "medium",
        "dependencies": [
          19,
          20,
          21
        ],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Develop Basic Frontend for Proposal Upload",
        "description": "Create a minimal user interface that allows Project Managers to select and upload PDF proposal files to the backend API.",
        "details": "Implement a file input element, an upload button, and basic visual feedback (e.g., loading spinner, success/error message). Focus on functionality over aesthetics for this initial version.",
        "testStrategy": "End-to-end tests for successful file upload and backend API interaction. User acceptance testing for basic usability.",
        "priority": "medium",
        "dependencies": [
          22
        ],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "Develop Basic Frontend for Initial Project/Backlog View",
        "description": "Create a read-only frontend component to display the project summary and the initial AI-generated backlog hierarchy (Epics, Sub-Epics, User Stories).",
        "details": "This component will fetch data from the backend and render it in a structured, readable format (e.g., nested lists or tree view). It serves as a verification step for the AI's output.",
        "testStrategy": "End-to-end tests for data fetching and rendering accuracy. User acceptance testing for readability.",
        "priority": "medium",
        "dependencies": [
          18,
          19,
          20,
          23
        ],
        "status": "todo",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-05T14:21:57.525Z",
      "updated": "2025-09-16T13:51:10.143Z",
      "description": "Tasks for master context"
    }
  }
}