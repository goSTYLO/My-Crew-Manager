from django.db import models
import uuid
from projects.models import Project, Goal

class Backlog(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    project = models.OneToOneField(Project, on_delete=models.CASCADE, related_name="backlog")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Backlog for {self.project.title}"

class Epic(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    backlog = models.ForeignKey(Backlog, on_delete=models.CASCADE, related_name="epics")
    title = models.CharField(max_length=255, help_text="Epic title")
    description = models.TextField(null=True, blank=True, help_text="Epic description")
    ai = models.BooleanField(default=False, help_text="Was this epic generated by AI?")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title

class SubEpic(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    epic = models.ForeignKey(Epic, on_delete=models.CASCADE, related_name="sub_epics")
    title = models.CharField(max_length=255, help_text="Sub-Epic title")
    description = models.TextField(null=True, blank=True, help_text="Sub-Epic description")
    ai = models.BooleanField(default=False, help_text="Was this sub-epic generated by AI?")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title

class UserStory(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    sub_epic = models.ForeignKey(SubEpic, on_delete=models.CASCADE, related_name="user_stories")
    title = models.CharField(max_length=255, help_text="User story title")
    description = models.TextField(null=True, blank=True, help_text="User story description")
    acceptance_criteria = models.TextField(null=True, blank=True, help_text="Acceptance criteria")
    ai = models.BooleanField(default=False, help_text="Was this user story generated by AI?")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title

class Task(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    story = models.ForeignKey(UserStory, on_delete=models.CASCADE, related_name="tasks")
    goal = models.ForeignKey(Goal, on_delete=models.SET_NULL, null=True, blank=True, related_name="tasks")
    title = models.CharField(max_length=255, help_text="Task title")
    ai = models.BooleanField(default=False, help_text="Was this task generated by AI?")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title