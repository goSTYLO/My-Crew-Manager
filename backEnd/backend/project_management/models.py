import uuid
from django.db import models
from django.conf import settings


class Project(models.Model):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False
    )
    title = models.CharField(
        max_length=255,
        help_text="Project name"
    )
    summary = models.TextField(
        help_text="LLM-generated overview"
    )
    status = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        default=0,
        help_text="Completion percentage (0â€“100)"
    )
    due_date = models.DateField(
        null=True,
        blank=True,
        help_text="Target completion date"
    )
    created_at = models.DateTimeField(
        auto_now_add=True
    )
    updated_at = models.DateTimeField(
        auto_now=True
    )
    source_pdf = models.FileField(
        upload_to="project_pdfs/",
        null=True,
        blank=True,
        help_text="Optional link to uploaded proposal"
    )
    owner = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="projects",
        help_text="Optional owner for multi-user support"
    )

    def __str__(self):
        return self.title


class Task(models.Model):
    STATUS_CHOICES = [
        ("todo", "To Do"),
        ("in_progress", "In Progress"),
        ("done", "Done"),
    ]

    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False
    )
    project_id = models.ForeignKey(
        "Project",   # assumes Project model is in the same app
        on_delete=models.CASCADE,
        related_name="tasks"
    )
    title = models.CharField(
        max_length=255,
        help_text="Task description"
    )
    role = models.CharField(
        max_length=100,
        help_text="Responsible role (e.g., Backend, AI Engineer)"
    )
    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default="todo",
        help_text="Task status"
    )
    created_by_llm = models.BooleanField(
        default=False,
        help_text="True if generated by assistant"
    )
    created_at = models.DateTimeField(
        auto_now_add=True
    )
    updated_at = models.DateTimeField(
        auto_now=True
    )

    def __str__(self):
        return f"{self.title} ({self.status})"
    
class Role(models.Model):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False
    )
    project_id = models.ForeignKey(
        "Project",   # assumes Project model is in the same app
        on_delete=models.CASCADE,
        related_name="roles"
    )
    title = models.CharField(
        max_length=100,
        help_text="Role name"
    )
    description = models.TextField(
        help_text="Responsibilities of this role"
    )
    created_by_llm = models.BooleanField(
        default=False,
        help_text="True if generated by assistant"
    )
    created_at = models.DateTimeField(
        auto_now_add=True
    )
    updated_at = models.DateTimeField(
        auto_now=True
    )

    def __str__(self):
        return f"{self.title} (Project: {self.project.title})"

class Timeline(models.Model):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False
    )
    project_id = models.ForeignKey(
        "Project",
        on_delete=models.CASCADE,
        related_name="timelines"
    )
    week_number = models.PositiveIntegerField(
        help_text="Week number of the project timeline"
    )
    tasks = models.JSONField(
        default=list,
        help_text="List of tasks for that week (array of strings or JSON)"
    )
    notes = models.TextField(
        null=True,
        blank=True,
        help_text="Optional notes for this week"
    )
    created_at = models.DateTimeField(
        auto_now_add=True
    )
    updated_at = models.DateTimeField(
        auto_now=True
    )

    def __str__(self):
        return f"Week {self.week_number} - Project: {self.project.title}"

class Risk(models.Model):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False
    )
    project = models.ForeignKey(
        "Project",
        on_delete=models.CASCADE,
        related_name="risks"
    )
    category = models.CharField(
        max_length=150,
        help_text="Risk category (e.g., Technical Limitations, Timeline Slips)"
    )
    mitigation = models.TextField(
        help_text="Strategy to reduce or manage risk"
    )
    contingency = models.TextField(
        help_text="Backup plan if mitigation fails"
    )
    created_by_llm = models.BooleanField(
        default=False,
        help_text="True if generated by assistant"
    )
    created_at = models.DateTimeField(
        auto_now_add=True
    )
    updated_at = models.DateTimeField(
        auto_now=True
    )

    def __str__(self):
        return f"{self.category} (Project: {self.project.title})"
