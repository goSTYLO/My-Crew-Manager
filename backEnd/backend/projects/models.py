from django.db import models
from django.conf import settings
import uuid

class Project(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    title = models.CharField(max_length=255, help_text="Project name")
    summary = models.TextField(help_text="Project summary")
    risks = models.TextField(null=True, blank=True, help_text="Project risks")
    ai = models.BooleanField(default=False, help_text="Was this project generated by AI?")
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="created_projects")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title

class Member(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    role = models.CharField(max_length=100, help_text="Member role in the project")
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name="members")
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="project_memberships")
    ai = models.BooleanField(default=False, help_text="Was this member role suggested by AI?")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.user.username} - {self.role}"

class Proposal(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    file = models.FileField(upload_to="proposals/", help_text="PDF file of the proposal")
    parsed_text = models.TextField(null=True, blank=True, help_text="Extracted content from PDF")
    methodology = models.TextField(null=True, blank=True, help_text="Project methodology")
    uploaded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="uploaded_proposals")
    project = models.OneToOneField(Project, on_delete=models.CASCADE, related_name="proposal")
    ai = models.BooleanField(default=False, help_text="Was this proposal parsed by AI?")
    uploaded_date = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Proposal for {self.project.title}"

class Feature(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name="features")
    title = models.CharField(max_length=150)
    description = models.TextField()
    ai = models.BooleanField(default=False, help_text="Was this feature generated by AI?")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

class Goal(models.Model):
    STATUS_CHOICES = [
        ("Todo", "Todo"),
        ("In Progress", "In Progress"),
        ("Done", "Done"),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name="goals")
    sprint = models.ForeignKey("sprints.Sprint", on_delete=models.SET_NULL, null=True, blank=True, related_name="goals")
    title = models.CharField(max_length=150)
    description = models.TextField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default="Todo")
    role = models.CharField(max_length=50, help_text="Role responsible for this goal")
    ai = models.BooleanField(default=False, help_text="Was this goal generated by AI?")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title